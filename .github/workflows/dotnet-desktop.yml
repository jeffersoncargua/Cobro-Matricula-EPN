name: .NET CI # Nombre del workflow

# Activadores o Desencadenates para iniciar el workflow para el CI/CD
on: 
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


permissions: # Estos son los permisos que se necesitan para poder publicar los resultados de los test
  checks: write
  pull-requests: write

# Aqui se realiza el trabajo de compliacion de nuestro proyecto .Net donde se
# ejecutará el codigo, restaurará las dependencias y correra las pruebas para 
# tener todo listo para la publicacion y el despliegue del proyecto
jobs:
  lint:
    runs-on: ubuntu-latest # Es el servidor que se utiliza para la compilacion, restauracion y realizacion de las pruebas
                           # para la publicacion y el despliegue

    # Se realizan los pasos necesarios para verificar que se ha compilado, restaurado las dependendicas y realizado las pruebas
    # para que se realice el empaquetado del proyecto para su publicacion y despliegue
    steps:
      - uses: actions/checkout@v4 # Se utiliza para emplear un entorno donde se realizaran los pasos siguientes correspondientes a .Net
      #En esta seccion se realizara la verificacion de la calidad del codigo por lo que se debe instalar el paquete SonarAnalyzer.CSharp desde el package Nuget
      - name: Run SonarAnalyzer # Esto permite correr el SonarAnalyzer para verificar la calidad del codigo del proyecto
        run: dotnet build-server shutdown && dotnet build /p:TreatWarningsAsErrors=false
      
      # Para verificar la implementacion y estilo del codigo se debe generar el archivo Directory.Build.props en nuestra solucion por lo que se debe instalar StyleCop desde el package Nuget
      - name: Run StyleCop # Permite correr el comando de StyleCop para verificar si la implementacion y calidad del codigo estan bien
        run: dotnet build /p:TreatWarningsAsErrors=false
      # Para esta seccion se debe generar el archivo .editorconfig en nuestro repositorio y colocar la siguiente configuracion en el archivo:
      # root = true

      # [*.cs]
      # dotnet_analyzer_diagnostic.category-Style.severity = warning
      # dotnet_code_quality.CA1062.null_check_validation_methods = ThrowArgumentNullException
      - name: Enforce code style # Una vez que se genero el archivo se debe realizar este paso para forzar a que se cumplan la regla que se establecio anteriormente
        run: dotnet format --verify-no-changes
  
  test:
    needs: [lint]
    runs-on: ubuntu-latest # Es el servidor que se utiliza para la compilacion, restauracion y realizacion de las pruebas
                           # para la publicacion y el despliegue

    # Se realizan los pasos necesarios para verificar que se ha compilado, restaurado las dependendicas y realizado las pruebas
    # para que se realice el empaquetado del proyecto para su publicacion y despliegue
    steps:
      - uses: actions/checkout@v4 # Se utiliza para emplear un entorno donde se realizaran los pasos siguientes correspondientes a .Net
      - name: Test
        run: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" # Comando para ejecutar todas las pruebas de nuestro proyecto que incluyen: unitarias, integracion y funcionales
      
      - name: Combine Coverage Reports # Esta seccion permite combinar en un solo informe sobre la cobertura del codigo por todos los proyectos de Test que tenga el proyecto que son: Unit, Integrates y Functional
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
        with: 
          reports: "**/*.cobertura.xml"
          targetdir: "${{ github.workspace }}"
          reporttypes: "Cobertura"
      - name: Upload Test Result Files # Esta seccion permite que se puedan encontrar los informes sobre la cobertura del codigo a traves de las ejecuciones de los proyectos de Test
        uses: actions/upload-artifact@v4
        with: 
          name: test-results
          path: ${{ github.workspace}}/**/TestResults/**/
      - name: Publish Test Results # Esta seccion permite tener una vision mas detallada de la cobertura del codigo, es decir, muestra los resultados obtenidos al ejecutar el worflow 
        uses: EnricoMi/publish-unit-test-result-action@v2.16.1
        if: (!cancelled())
        with:
          trx_files: "${{ github.workspace }}/**/*.trx"
      - name: Publish Code Coverage Report # Esta seccion permite tener el informe de cobertura de codigo
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          format: markdown      

  restore:
    needs: [lint,test]
    runs-on: ubuntu-latest # Es el servidor que se utiliza para la compilacion, restauracion y realizacion de las pruebas
                           # para la publicacion y el despliegue

    # Se realizan los pasos necesarios para verificar que se ha compilado, restaurado las dependendicas y realizado las pruebas
    # para que se realice el empaquetado del proyecto para su publicacion y despliegue
    steps:
      - uses: actions/checkout@v4 # Se utiliza para emplear un entorno donde se realizaran los pasos siguientes correspondientes a .Net
      - name: Restore Depedencies
        run: dotnet restore --locked-mode # Comando para restaurar las dependencias que necesita nuestro proyecto .Net y la configuracion --locked-mode evitará que los archivos de bloqueo se actualicen durante la restauración y garantizará que se utilicen las versiones exactas de las dependencias enumeradas en los archivos de bloqueo.

  build:
    needs: [lint,restore,test]
    runs-on: ubuntu-latest # Es el servidor que se utiliza para la compilacion, restauracion y realizacion de las pruebas
                           # para la publicacion y el despliegue

    # Se realizan los pasos necesarios para verificar que se ha compilado, restaurado las dependendicas y realizado las pruebas
    # para que se realice el empaquetado del proyecto para su publicacion y despliegue
    steps:
      - uses: actions/checkout@v4 # Se utiliza para emplear un entorno donde se realizaran los pasos siguientes correspondientes a .Net
      - name: Setup .Net SDK
        uses: actions/setup-dotnet@v4 # Se utiliza para indicar el SDK con el que se desarrollo el entorno para .Net
        with:
          dotnet-version: '8.0.x' # Aqui se especifica la version con la que se desarrollo .Net pero se puede colocar multiples versiones
          cache: true # Permitira emplear el uso de memoria cache para almacenar los archivos o paquetes Nuget para evitar llamarlos en cada compilacion del archivo yml
          cache-dependency-path: "**/packages.lock.json" # Este archivo se generara en la carpeta de solucion del proyecto .net que permitira bloquear que se restauren paquetes que ya estan almacenados en cache
      
      - name: Build
        run: dotnet build # Comando para construir y/o compilar nuestro proyecto para comprobar errores en el codigo de nuestro proyecto
      
      
# Si por algun motivo falla la ejecucion del WorkFlow se deben revisar las versiones de los actions/* para poder solucionar algun inconveniente

# En la ejucion del comando:  dotnet build --configuration Release --no-restore no permite construir la aplicacion en su version mas optimizada para produccion

# En la ejecucion del comando: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" permite recopilar la informacion sobre la cobertura del codigo mediante la ejecucion de las pruebas

# Cuando se genere el archivo Directory.Build.props se debe considerar añadirlo desde visual studio de preferencia y añadirle el codigo xml que se lo puede encontrar en google
#<Project>
#   <PropertyGroup>
#     <TargetFramework>net8.0</TargetFramework>
#   </PropertyGroup>
#</Project>

# Cuando se realice el paso Enforce code style y se observe que existen errores en el estilo del codigo, se sugiere probar primero el comando:
# dotnet format --verify-no-changes --verbosity diagnostic . Para verificar y solucionar los inconvenients antes se subirlos a github.

# Cuando se realice la ejecucion para almacenar los paquetes en memoria cache se debe incluir en el archivo del proyecto la siguiente configuracion:
#<PropertyGroup>
# <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
#</PropertyGroup> 
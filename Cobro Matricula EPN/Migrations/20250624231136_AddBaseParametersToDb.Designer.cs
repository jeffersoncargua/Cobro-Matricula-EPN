// <auto-generated />
using System;
using Cobro_Matricula_EPN.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cobro_Matricula_EPN.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624231136_AddBaseParametersToDb")]
    partial class AddBaseParametersToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entity.Entities.BaseParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("CostoHoraPeriodo")
                        .HasColumnType("real");

                    b.Property<float>("CostoOptimo")
                        .HasColumnType("real");

                    b.Property<float>("CostoOptimoPeriodo")
                        .HasColumnType("real");

                    b.Property<float>("CreditoPerdidaTemporal")
                        .HasColumnType("real");

                    b.Property<int>("CreditoPeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("FormacionAcademica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoraPeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<float>("HoraPromedioPeriodoAcademico")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeArancelEspecial")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeCostoOptimoAnual")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeMatriculaExtraordinario")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajePerdidaTemporal")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajePromedioAcademico")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeRecargoSegunda")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeRecargoTercera")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeValorArancel")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeValorMax")
                        .HasColumnType("real");

                    b.Property<float>("PorcentajeValorMin")
                        .HasColumnType("real");

                    b.Property<float>("ValorArancelMax")
                        .HasColumnType("real");

                    b.Property<float>("ValorArancelMin")
                        .HasColumnType("real");

                    b.Property<float>("ValorMatriculaMax")
                        .HasColumnType("real");

                    b.Property<float>("ValorMatriculaMin")
                        .HasColumnType("real");

                    b.Property<float>("ValorMax")
                        .HasColumnType("real");

                    b.Property<float>("ValorMin")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("BaseParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CostoHoraPeriodo = 4.0367618f,
                            CostoOptimo = 3325f,
                            CostoOptimoPeriodo = 1662.5f,
                            CreditoPerdidaTemporal = 9f,
                            CreditoPeriodoAcademico = 15,
                            FormacionAcademica = "Ingeniería",
                            HoraPeriodoAcademico = 720,
                            HoraPromedioPeriodoAcademico = 374.4f,
                            PorcentajeArancelEspecial = 0.25f,
                            PorcentajeCostoOptimoAnual = 0.1f,
                            PorcentajeMatriculaExtraordinario = 0.25f,
                            PorcentajePerdidaTemporal = 0.6f,
                            PorcentajePromedioAcademico = 0.52f,
                            PorcentajeRecargoSegunda = 0.1f,
                            PorcentajeRecargoTercera = 0.21f,
                            PorcentajeValorArancel = 0.1f,
                            PorcentajeValorMax = 0.5f,
                            PorcentajeValorMin = 0.1f,
                            ValorArancelMax = 755.6818f,
                            ValorArancelMin = 151.13637f,
                            ValorMatriculaMax = 75.568184f,
                            ValorMatriculaMin = 15.113637f,
                            ValorMax = 831.25f,
                            ValorMin = 166.25f
                        },
                        new
                        {
                            Id = 2,
                            CostoHoraPeriodo = 4.0367618f,
                            CostoOptimo = 3325f,
                            CostoOptimoPeriodo = 1662.5f,
                            CreditoPerdidaTemporal = 5f,
                            CreditoPeriodoAcademico = 15,
                            FormacionAcademica = "Tecnología",
                            HoraPeriodoAcademico = 720,
                            HoraPromedioPeriodoAcademico = 374.4f,
                            PorcentajeArancelEspecial = 0.25f,
                            PorcentajeCostoOptimoAnual = 0.1f,
                            PorcentajeMatriculaExtraordinario = 0.25f,
                            PorcentajePerdidaTemporal = 0.6f,
                            PorcentajePromedioAcademico = 0.56f,
                            PorcentajeRecargoSegunda = 0.1f,
                            PorcentajeRecargoTercera = 0.21f,
                            PorcentajeValorArancel = 0.1f,
                            PorcentajeValorMax = 0.5f,
                            PorcentajeValorMin = 0.1f,
                            ValorArancelMax = 755.6818f,
                            ValorArancelMin = 151.13637f,
                            ValorMatriculaMax = 75.568184f,
                            ValorMatriculaMin = 15.113637f,
                            ValorMax = 831.25f,
                            ValorMin = 166.25f
                        });
                });

            modelBuilder.Entity("Entity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
